# CTWR Website Development Rules
# Based on cursor.directory best practices for web development

## Project Overview
This is a Jekyll static site for CivicTech Waterloo Region, focusing on accessibility, performance, security, and maintainability.

## Code Quality Standards

### HTML
- Use semantic HTML5 elements
- Ensure proper heading hierarchy (h1 ‚Üí h2 ‚Üí h3)
- Include alt text for all images
- Use ARIA labels and roles where appropriate
- Validate HTML5 compliance
- Use skip navigation links for accessibility

### CSS

**CRITICAL: CSS SPACING CLEANUP - ACTIVE (Oct 17, 2025 21:20 UTC)**

‚úÖ **PHASE 1 COMPLETE:** Deleted 16.8KB orphaned code (responsive.css + critical.css)
üöß **PHASE 3 IN PROGRESS:** Replacing 27 in-between variable uses + 37 hardcoded spacing values

See `CURSOR_HANDOFF_SPACING_CLEANUP.md` for complete status and next steps.
See CLAUDE.md section "CSS CLEANUP STRATEGY" for original plan.

**Core Principles:**
- **Visual Parity is Sacred**: ZERO visual changes allowed during refactoring
- **One Change at a Time**: Extract ONE component per commit, test, commit, repeat
- **CSS Variables Only**: Never hard-code colors, spacing, or typography
- **BEM Naming**: Block__Element--Modifier pattern for all components
- **!important Policy**: Only allowed in utility classes (display, text-align helpers)

**Current State (Oct 17, 2025 - Post Analysis):**
üìä **Total:** 28 files, 96.4 KB, 4,662 lines, 665 rules, 684 selectors
üìà **Performance Gains:** 88% total CSS reduction (from ~800KB)

‚úÖ **MAJOR WINS - Architecture Complete:**
- **Button system:** 7.3KB, BEM methodology, ZERO !important ‚úì
- **Bootstrap custom:** 2.0KB (99.2% reduction from 237KB) ‚úì
- **Component architecture:** Fully modular /base, /components, /pages structure ‚úì
- **Master CSS loader:** main.css (3.6KB) orchestrates all imports in correct order ‚úì
- **Single source of truth:** base/variables.css (4.0KB) - no duplicates ‚úì
- **Max specificity:** [1, 2, 0] - excellent, no specificity wars ‚úì

‚úÖ **Component Files Extracted:**
- navigation.css (6.5KB), hero.css (4.0KB), footer.css (3.9KB)
- services.css (5.7KB), meeting.css (2.7KB), forms.css (1.3KB)
- typography.css (2.8KB), fallbacks.css (7.2KB)
- buttons.css (7.3KB), avatar.css (0.7KB), preloader.css (0.8KB)
- sponsors.css (0.7KB), projects.css (1.0KB), organizers.css (1.3KB)
- featured.css (0.3KB), icons.css (0.2KB), page-header.css (0.4KB)
- ‚ùå responsive.css DELETED (12.1KB orphaned file - Oct 17)
- ‚ùå critical.css DELETED (4.7KB orphaned file - Oct 17)
- +4 more component files

‚úÖ **!important Usage (63 total - ALL APPROPRIATE):**
All 63 instances are in utility classes (intentional and correct):
- base/fallbacks.css (41) - Display/flexbox/spacing utilities ‚úì
- base/responsive.css (17) - Responsive display/text utilities ‚úì
- loading-strategy.css (5) - Critical loading utilities ‚úì
**Verdict:** Perfect usage - utility classes SHOULD use !important to override components

‚ö†Ô∏è **CRITICAL ISSUE FOUND: Duplicate Styles**
style.css (13.4KB/635 lines) contains DUPLICATES of existing component files:
- Avatar styles (52-62) ‚Üí Already in components/avatar.css
- Preloader (68-106) ‚Üí Already in components/preloader.css
- Icons (114-124) ‚Üí Already in components/icons.css
- Featured (216-232) ‚Üí Already in components/featured.css
- Sponsors (238-290) ‚Üí Already in components/sponsors.css
- Projects (299-346) ‚Üí Already in components/projects.css
- Forms (378-464) ‚Üí Already in components/forms.css
- Organizers (542-600) ‚Üí Already in components/organizers.css

**Root Cause:** During component extraction, code was copied but not deleted from style.css

**Next Steps (Final Cleanup - 1 hour):**
1. **Remove duplicate sections from style.css** (30 min)
   - Delete lines that already exist in component files
   - Keep only unique styles (About profiles, page-specific utilities)
   - Expected result: style.css ‚Üí ~200 lines (68% reduction)
2. **Verify all components load via main.css** (15 min)
   - Ensure import order is correct
   - Test all pages render identically
3. **Final validation** (15 min)
   - Run full regression test on all pages
   - Verify no missing styles
   - Confirm 100% visual parity

**Extraction Template:**
```bash
# 1. Create component file (copy lines from style.css)
# 2. Add @import to main.css in correct layer
# 3. Delete lines from style.css
# 4. Test: bundle exec jekyll serve
# 5. Visual check: ALL pages identical at ALL breakpoints
# 6. If perfect: commit. If ANY issue: git restore .
```

**Testing Checklist (NEVER SKIP):**
- [ ] Take screenshots before changes
- [ ] Make changes
- [ ] Take screenshots after changes
- [ ] Compare screenshots (ANY difference = REVERT)
- [ ] Test breakpoints: 1920px, 1440px, 1024px, 768px, 375px, 320px
- [ ] Test all pages: index.html, about.html, projects.html
- [ ] Check browser console for errors
- [ ] Run: bash scripts/validate-css.sh (if exists)
- [ ] If all pass: commit. If ANY fail: revert immediately

**CSS Standards:**
- Follow BEM methodology for class naming
- Use CSS custom properties (variables) for consistency
- Mobile-first responsive design approach
- Use logical properties where possible
- !important ONLY in utility classes (display, spacing, text-align helpers)
- Group related styles together
- Use consistent spacing and indentation
- Keep max specificity low (prefer classes over IDs and descendant selectors)

**Color System (Always use variables):**
```css
--primary-color: #FC6C6D;      /* Red/coral - accent */
--secondary-color: #2D6F72;    /* Teal - brand primary */
--gray-900: #222;  --gray-700: #444;  --gray-600: #555;
--gray-500: #666;  --gray-400: #777;  --gray-300: #999;
```

**Spacing System:**
```css
--space-1: 4px;  --space-2: 8px;  --space-3: 12px;  --space-4: 16px;
--space-5: 24px; --space-6: 32px; --space-7: 48px;  --space-8: 64px;
```

**Border Radius:**
```css
--radius-sm: 4px; --radius-md: 12px; --radius-card: 16px;
--radius-lg: 24px; --radius-xl: 32px; --radius-full: 9999px;
```

**Emergency Procedures:**
If something breaks:
1. Stop immediately
2. Revert: `git restore .`
3. Take screenshots of broken state
4. Document what changed
5. Ask for help

**NEVER:**
- ‚ùå Commit broken states
- ‚ùå Use !important to fix issues
- ‚ùå Skip testing steps
- ‚ùå Extract multiple components at once
- ‚ùå Make visual changes during refactoring
- ‚ùå Hard-code values (always use CSS variables)

### JavaScript
- Use modern ES6+ features
- Prefer const/let over var
- Use meaningful variable and function names
- Add JSDoc comments for complex functions
- Handle errors gracefully
- Minimize global scope pollution
- Use event delegation where appropriate

### Jekyll
- Use Jekyll's built-in features (collections, data files, includes)
- Keep front matter minimal and consistent
- Use Jekyll's asset pipeline
- Optimize for build performance

## Security Requirements
- No hardcoded secrets or API keys
- Use HTTPS for all external resources
- Implement Content Security Policy (CSP)
- Add security headers (X-Frame-Options, X-Content-Type-Options, etc.)
- Sanitize user inputs
- Use rel="noopener noreferrer" for external links

## Performance Standards
- Optimize images (WebP format preferred)
- Minify CSS and JavaScript
- Use resource hints (preload, prefetch, dns-prefetch)
- Implement lazy loading for images
- Minimize HTTP requests
- Use CDN for external resources
- Achieve Core Web Vitals targets

## Accessibility Requirements (WCAG 2.1 AA)
- Color contrast ratio minimum 4.5:1
- Keyboard navigation support
- Screen reader compatibility
- Focus management
- Alternative text for images
- Proper heading structure
- Form labels and error messages

## File Organization
- Keep related files together
- Use descriptive file and folder names
- Separate concerns (HTML, CSS, JS)
- Use includes for reusable components
- Maintain consistent naming conventions

## Testing Requirements
- HTML validation
- CSS linting with stylelint
- JavaScript linting with ESLint
- Accessibility testing with Pa11y
- Performance testing with Lighthouse
- Cross-browser compatibility testing

## Git Workflow
- Use conventional commit messages
- Create feature branches for new work
- Review all changes before merging
- Keep commits atomic and focused
- Update documentation with code changes

## Documentation
- Maintain README with setup instructions
- Document configuration changes
- Keep audit reports up to date
- Include troubleshooting guides
- Document deployment procedures

## Dependencies
- Keep dependencies up to date
- Use exact versions for production
- Regular security audits
- Remove unused dependencies
- Prefer smaller, focused packages

## Build Process
- Automated linting and testing
- Minification for production
- Source maps for debugging
- Asset optimization
- Cache busting for static assets

## Monitoring
- Regular security scans
- Performance monitoring
- Accessibility compliance checks
- Dependency vulnerability scanning
- Build status monitoring
